{"/Components/Alert":{"title":"Alert","data":{"":"The Alert component provides a simple way to display alert messages to users. It supports various types of alerts, such as success, error, warning, and info, and can be customized with different positions and durations.","installation#Installation":"Requirements: React version >= 16.8 or abovewith yarn:\nyarn add react-toastify\nwith npm:\nnpm install --save react-toastify","the-playground#The Playground":"","toas-container#Toas Container":"<ToastContainer\n  position=\"top-right\"\n  autoClose={5000}\n  hideProgressBar={false}\n  newestOnTop={false}\n  closeOnClick\n  rtl={false}\n  pauseOnFocusLoss\n  draggable\n  pauseOnHover\n  theme=\"light\"\n  transition:Bounce\n/>;\n{\n  /* Same as */\n}\n<ToastContainer />;","toast-emitter#Toast Emitter":"toast('ðŸ¦„ Wow so easy!', {\n  position: 'top-right',\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'light',\n  transition: Bounce,\n});","component#Component":"This component is designed to handle alert messages using react-toastify. It provides a set of predefined methods for displaying different types of alerts: informational, success, warning, error, and default messages. Each method accepts a text message and optional configuration options for customization.The alertMessage object encapsulates these methods, enabling easy invocation of alert messages throughout your application. The Alert component renders a ToastContainer with default settings, including a top-left position, auto-close duration of 3000 milliseconds, newest alerts on top, and a light theme. These settings can be customized as needed.\nimport { ToastContainer, toast, ToastOptions } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\ninterface AlertMessage {\n  info: (text: string, options?: ToastOptions) => void;\n  success: (text: string, options?: ToastOptions) => void;\n  warning: (text: string, options?: ToastOptions) => void;\n  error: (text: string, options?: ToastOptions) => void;\n  default: (text: string, options?: ToastOptions) => void;\n}\nconst alertMessage: AlertMessage = {\n  info: (text: string, options?: ToastOptions) => toast.info(text, options),\n  success: (text: string, options?: ToastOptions) =>\n    toast.success(text, options),\n  warning: (text: string, options?: ToastOptions) =>\n    toast.warning(text, options),\n  error: (text: string, options?: ToastOptions) => toast.error(text, options),\n  default: (text: string, options?: ToastOptions) => toast(text, options),\n};\nconst Alert = () => {\n  return (\n    <ToastContainer\n      position=\"top-left\"\n      autoClose={3000}\n      newestOnTop\n      closeOnClick\n      rtl={false}\n      pauseOnFocusLoss\n      draggable={false}\n      theme=\"light\"\n    />\n  );\n};\nexport { Alert, alertMessage };","examples#Examples":"","types#Types":"This section demonstrates how to use different types of alert notifications with the alertMessage component. Each button triggers a specific type of alert: Info, Warning, Success, or Error. These buttons are styled using Tailwind CSS to provide a visually appealing and interactive user experience.\nInfo\nWarning\nSuccess\nError\nimport { Alert, alertMessage } from './path-to-alert-component';\nconst App = () => {\n  return (\n    <div className=\"flex items-center justify-center h-screen bg-gray-100\">\n      <Button\n        variant=\"primary\"\n        size=\"medium\"\n        className=\"mt-4 bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-blue-600 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105\"\n        onClick={() =>\n          alertMessage.success('Success Notification!', {\n            position: 'top-center',\n          })\n        }\n      >\n        Show Alert\n      </Button>\n      <Alert />\n    </div>\n  );\n};\nexport default App;","themes#Themes":"This section demonstrates the application of different themes to alert notifications using the alertMessage component. The available themes are Dark, Light, and Colored. Each button triggers an alert with a specific theme, styled using Tailwind CSS for a visually appealing and interactive interface.Available Variations:\nDark Theme: Applies a dark background with white text.\nLight Theme: Applies a light background with dark text.\nColored Theme: Applies a dynamic, multi-colored style for an eye-catching effect.\nDark\nLight\nColored\nimport { Alert, alertMessage } from './path-to-alert-component';\nconst App = () => {\n  return (\n    <div className=\"flex items-center justify-center h-screen bg-gray-100\">\n      <Button\n        variant=\"dark\"\n        size=\"medium\"\n        className=\"m-4 text-white font-semibold py-2 px-4 rounded-lg shadow-md bg-gray-800 hover:bg-gray-700 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-75 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105\"\n        onClick={() =>\n          alertMessage.success('Wow so easy!', {\n            position: 'top-center',\n            theme: 'dark',\n          })\n        }\n      >\n        Dark\n      </Button>\n      <Alert />\n    </div>\n  );\n};\nexport default App;","positions#Positions":"Positioning alerts effectively can significantly enhance the user experience by ensuring notifications are seen promptly. The alertMessage component provides flexibility in positioning alerts at various screen locations. This section demonstrates how to configure and use different alert positions: Top-center, Bottom-center, Top-right, Bottom-right, Top-left, and Bottom-left.\nTop-center\nBottom-center\nTop-right\nBottom-right\nTop-left\nBottom-left\nimport { Alert, alertMessage } from './path-to-alert-component';\nconst App = () => {\n  return (\n    <div className=\"flex items-center justify-center h-screen bg-gray-100\">\n      <Button\n        size=\"medium\"\n        className=\"m-4  text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-blue-600 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105\"\n        onClick={() =>\n          alertMessage.info('Wow so easy!', { position: 'top-center' })\n        }\n      >\n        Top-center\n      </Button>\n      <Alert />\n    </div>\n  );\n};\nexport default App;","transitions#Transitions":"Transitions add a dynamic touch to alert notifications, making them more engaging and noticeable. The alertMessage component supports various transitions such as Flip, Bounce, Zoom, and Slide. This section demonstrates how to implement these transitions using styled buttons.\nFlip\nBounce\nZoom\nSlide\nimport { Alert, alertMessage } from './path-to-alert-component';\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\nconst App = () => {\n  return (\n    <div className=\"flex items-center justify-center h-screen bg-gray-100\">\n      <Button\n        size=\"medium\"\n        className=\"m-4 bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-blue-600 hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105\"\n        onClick={() => alertMessage.info('Wow so easy!', { transition: Flip })}\n      >\n        Flip\n      </Button>\n      <Alert />\n    </div>\n  );\n};\nexport default App;","options#options":"","alertmessage-methods#AlertMessage Methods":"Method\tType\tDescription\tinfo\tfunction\tDisplays an informational toast notification. Takes two parameters: text (string) and optional options (ToastOptions).\tsuccess\tfunction\tDisplays a success toast notification. Takes two parameters: text (string) and optional options (ToastOptions).\twarning\tfunction\tDisplays a warning toast notification. Takes two parameters: text (string) and optional options (ToastOptions).\terror\tfunction\tDisplays an error toast notification. Takes two parameters: text (string) and optional options (ToastOptions).\tdefault\tfunction\tDisplays a default toast notification. Takes two parameters: text (string) and optional options (ToastOptions).","toastcontainer-props#ToastContainer Props":"Prop\tType\tDefault\tDescription\tposition\tstring\t'top-center'\tThe position of the toast notification on the screen.\tautoClose\tnumber\t3000\tTime in milliseconds to auto close the toast.\tnewestOnTop\tbool\ttrue\tWhether the newest toast appears on top.\tcloseOnClick\tbool\ttrue\tWhether the toast closes when clicked.\trtl\tbool\tfalse\tRight-to-left layout support.\tpauseOnFocusLoss\tbool\ttrue\tPause the toast auto close when the window loses focus.\tdraggable\tbool\tfalse\tWhether the toast is draggable.\ttheme\tstring\t'light'\tThe theme of the toast notifications. Available options are light, dark, colored.\t\nClick here to read more."}},"/Components/select":{"title":"Select Component","data":{"installation#Installation":"Start by installing react-select:\nyarn add react-select\nor\nnpm i --save react-select\nThe Select component is a customizable select input built on top of the react-select library. It provides various features such as multi-select, search functionality, clearable options, and more.","examples#Examples":"","basic-select#Basic Select":"A basic example demonstrating the use of the Select component with a simple set of options.\nimport Select from '../../components/Select';\nconst basicOptions = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'banana', label: 'Banana' },\n  { value: 'cherry', label: 'Cherry' },\n  { value: 'date', label: 'Date' },\n  { value: 'elderberry', label: 'Elderberry' },\n];\nconst App = () => (\n  <Select options={basicOptions} defaultValue={basicOptions[0]} />\n);\nexport default App;","multi-select#Multi-Select":"An example demonstrating the use of the Select component with multi-select functionality enabled.\nimport Select from '../../components/Select';\nconst multiSelectOptions = [\n  { value: 'red', label: 'Red' },\n  { value: 'blue', label: 'Blue' },\n  { value: 'green', label: 'Green' },\n  { value: 'yellow', label: 'Yellow' },\n  { value: 'purple', label: 'Purple' },\n];\nconst App = () => (\n  <Select\n    options={multiSelectOptions}\n    isMulti\n    defaultValue={[multiSelectOptions[0], multiSelectOptions[1]]}\n  />\n);\nexport default App;","disabled#Disabled":"An example demonstrating the use of the Select component with the disabled state.\nconst disabledOptions = [\n  { value: 'car', label: 'Car' },\n  { value: 'bike', label: 'Bike' },\n  { value: 'bus', label: 'Bus' },\n  { value: 'train', label: 'Train' },\n  { value: 'airplane', label: 'Airplane' },\n];\nconst App = () => <Select options={disabledOptions} isDisabled />;\nexport default App;","animated-components#Animated Components":"React-Select comes with a makeAnimated function that create animated wrappers around components passed in as arguments. If no arguments are passed, built-in components are wrapped instead.\nimport makeAnimated from 'react-select/animated';\nimport Select from '../../components/Select';\nconst multiSelectOptions = [\n  { value: 'red', label: 'Red' },\n  { value: 'blue', label: 'Blue' },\n  { value: 'green', label: 'Green' },\n  { value: 'yellow', label: 'Yellow' },\n  { value: 'purple', label: 'Purple' },\n];\nconst animatedComponents = makeAnimated();\nexport default function AnimatedMulti() {\n  return (\n    <Select\n      options={multiSelectOptions}\n      isMulti\n      defaultValue={[multiSelectOptions[3], multiSelectOptions[4]]}\n      components={animatedComponents}\n    />\n  );\n}","props#Props":"Prop\tType\tDefault\tDescription\toptions\tarray\t-\tAn array of options to display in the select menu. Each option is an object with value and label keys.\tdefaultValue\tobject\t-\tThe default selected option.\tisDisabled\tbool\tfalse\tWhether the select input is disabled.\tisLoading\tbool\tfalse\tWhether the select input is loading.\tisClearable\tbool\ttrue\tWhether the selected option can be cleared.\tisRtl\tbool\tfalse\tWhether to display the select input in right-to-left mode.\tisSearchable\tbool\tfalse\tWhether the select input is searchable.\tisMulti\tbool\tfalse\tWhether to enable multi-select functionality.\tclassName\tstring\t'basic-single'\tAdditional CSS classes to apply to the select input.\tclassNamePrefix\tstring\t'select'\tPrefix for the CSS class names.\tname\tstring\t'select'\tThe name attribute of the select input.\tplaceholder\tstring\t'Select...'\tPlaceholder text for the select input.\tprops\tobject\t-\tAdditional props passed to the react-select component."}}}